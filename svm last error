import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn import metrics

# Read the CSV file
df = pd.read_csv('Social_Network_Ads.csv')
X = df[['Age', 'EstimatedSalary']]
y = df['Purchased']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Scale the features
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

# Create and fit the SVM classifier
classifier = SVC(kernel='linear', random_state=0)
classifier.fit(X_train, y_train)

# Predict on the test data
y_pred = classifier.predict(X_test)

# Calculate accuracy score
accuracy = metrics.accuracy_score(y_test, y_pred)
print("Accuracy score with linear kernel:", accuracy)

# Plot test data vs predicted data
plt.scatter(X_test[:, 0], X_test[:, 1], c=y_test)
plt.title('Test Data')
plt.xlabel('Age')
plt.ylabel('Estimated Salary')
plt.show()

# Plot decision boundary
w = classifier.coef_[0]
a = -w[0] / w[1]
xx = np.linspace(X_test[:, 0].min() - 1, X_test[:, 0].max() + 1)
yy = a * xx - classifier.intercept_[0] /w[1]
plt.plot(xx,yy,'k.')
plt.title("linear kernal")
plt.show()
unknown_sample=np.array([[30,81000]])
unknown_prediction=classifier.predict(unknown_sample)
print("prediction for unknown sample(age=30,estimated salary=87000):","purchased"if unknown_prediction[0]==1 else "no purchased")
